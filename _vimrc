" Generated by plato-dotfiles/build-windows.sh
" plugins.vimrc:
" Workaround for: https://github.com/VundleVim/Vundle.vim/issues/779
" and https://github.com/junegunn/vim-plug/issues/539
let &shell='cmd.exe'

" Specify a directory for junegunn/vim-plug plugins:
call plug#begin('/c/Users/there/vimfiles/plugged')
  " Make sure you use single quotes
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
  Plug 'vim-scripts/tComment'
  Plug 'scrooloose/nerdtree'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'altercation/vim-colors-solarized'
  Plug 'airblade/vim-gitgutter'
  Plug 'terryma/vim-multiple-cursors'
call plug#end()

"  Untested:
"  Plug 'rking/ag.vim'
"  Plug 'tpope/vim-abolish'
"  Plug 'tpope/vim-repeat'
"  Plug 'tpope/vim-surround'
"  Plug 'SirVer/ultisnips'
"  Plug 'honza/vim-snippets'
"  Plug 'majutsushi/tagbar'
"  Plug 'jstemmer/gotags'


let NERDTreeQuitOnOpen = 1

let g:gitgutter_sign_column_always=1

" configure vim-go
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_auto_sameids = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_gocode_unimported_packages = 1
let g:go_list_type = "quickfix"

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" config.vimrc:
" make backspace delete things again:
" set backspace=2
set backspace=indent,eol,start

" mitigate RHSA-2016:2972-1:
set nomodeline

cnoreabbrev ag Ag

" Visual
set hlsearch   " Highlight the last used search pattern
set number      " start with line number displayed
" set mouse=ncr " click to position cursor in normal, drag to select in input
set mouse=a     " click to position cursor always
set laststatus=2
set splitbelow  " open windows to right and down
set splitright
set autowrite   " save on buffer switch
set updatetime=250
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor

" indents/spacing
set textwidth=80
set tabstop=2
set softtabstop=2
set expandtab   " tab inserts two spaces
set shiftwidth=2
set autoindent

" Folds
set foldmethod=indent "set foldmethod=syntax
set foldlevelstart=10  "set foldlevel=0
set foldignore=/      "dont fold comments
" zM = close all
" zR = open all
" za = toggle @ cursor
" zO = open @ cursor and children
" zC = close @ cursor and children

" Colors
"set background=dark
set background=light
"let g:solarized_termcolors=256
"let g:solarized_termtrans=1
"let g:solarized_contrast="normal"
"let g:solarized_visibility="normal"
"color solarized             " Load a colorscheme

" Filetype specific configs
augroup myfiletypes
autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et
autocmd FileType go,php  set tabstop=2 shiftwidth=0 softtabstop=0 noexpandtab
"autocmd FileType python set complete+=k~/.vim/syntax/python.vim isk+=.,(
autocmd FileType htm,xhtml,xml so ~/.vim/ftplugin/html_autoclosetag.vim
augroup END
" Switch syntax highlighting on, when the terminal has colors
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" IDK
 set lazyredraw                  " Don't redraw while executing macros
 set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)


if has('clipboard')
  if has('unnamedplus')  " When possible use + register for copy-paste
    set clipboard=unnamed,unnamedplus
  else         " On mac and Windows, use * register for copy-paste
    set clipboard=unnamed
  endif
endif


set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility

set hidden


" restore cursor position
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END


highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode

set cursorline

if has('statusline')
  set laststatus=2

  " Broken down into easily includeable segments
  set statusline=%<%f\                     " Filename
  set statusline+=%w%h%m%r                 " Options
  set statusline+=%{fugitive#statusline()} " Git Hotness
  set statusline+=%{go#statusline#Show()}

  set statusline+=\ [%{&ff}/%Y]            " Filetype
  set statusline+=\ [%{getcwd()}]          " Current dir
  set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#cmd#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
au FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
" binds.vimrc:
" vim
" osx: alt-shift-q; alt-q
nnoremap Œ :qa!<CR>
nnoremap ∑ :wqa<CR>

let mapleader=","

" f2 -> toggle line numbers, f3 -> toggle nerdtree
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
nnoremap <F3> :NERDTreeToggle<CR>

set pastetoggle=<leader>8
nmap <leader>7 :call ToggleBG()<CR>

nnoremap <C-/> <Plug>TComment

" window manipulation:
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
inoremap <C-j> :cnext<CR>
inoremap <C-k> :cprevious<CR>
nnoremap <C-\> :cclose<CR>
nnoremap <Leader>= :vnew<CR>
nnoremap <Leader>- <C-w>c
nnoremap <Leader>[ <C-w>H
nnoremap <Leader>] <C-w>K
nnoremap <Leader><Backspace> :bdel<CR>
nnoremap <Leader>m :NERDTreeToggle<CR>
nnoremap <Leader><Space> za
" alt-shift-h, alt-shift-l on osx -> buffer switch:

" vim-go
augroup vg
au FileType go nmap <Leader>, :GoAlternate<CR>
au FileType go nmap <Leader>t :GoTest<CR>
au FileType go nmap <Leader>T :GoTestFunc<CR>
"au FileType go nmap <Leader>b :GoBuild<CR>
" au FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
au FileType go nmap <Leader>r :GoRename<CR>
au FileType go nmap <Leader>R :GoRun<CR>
au FileType go nmap <Leader>z :GoCallers<CR>
au FileType go nmap <Leader>x :GoCallees<CR>
au FileType go nmap <Leader>? :GoCoverageToggle<CR>
au FileType go nmap <Leader>c :GoReferrers<CR>
au FileType go nmap <Leader>v :GoImplements<CR>
au FileType go nmap <Leader>d :GoDef<CR>
au FileType go nmap <Leader>D :GoDefPop<CR>
au FileType go nmap <Leader>i :GoImports<CR>
au FileType go nmap <Leader>I :GoInstall<CR>
au FileType go nmap <Leader>p :GoPlay<CR>
au FileType go nmap <Leader>' :GoDocBrowser<CR>
au FileType go nmap <Leader>/ :GoInfo<CR>
augroup END

" jump to next/prev vim-go error:
" nnoremap <C-j> :cn<CR>
" nnoremap <C-k> :cp<CR>

nnoremap <Leader>. :TagbarToggle<CR>

