#!/bin/bash

#
# clean
rm -rf ./tmp/ ./generated/
# mkdir -p ./generated/.vim/colors
mkdir -p ./generated/themer
mkdir -p $HOME/.zsh

#
# configure

# default to osx if not set:
OS=${OS:-osx}

FORCE=0
# THEME="./misc/themes/themer-default.colors"
THEME="./misc/themes/monogreen-v5.colors"
V=./vim
VRC=./generated/.vimrc
VIMFILES=./generated/.vim
CP=cp
:>$VRC

while test $# -gt 0; do
  case "$1" in
    -f|--f|--force)
	  FORCE=1
	  break
      ;;
    *)
      break
      ;;
  esac	
done

# prereqs
yarn install

#
# OS Specific

if [ "$OS" = "osx" ]; then
  # brew's recursive copy is broke
  CP="/bin/cp"

  mkdir -p $VIMFILES
  printf "\n\" osx-specific vim config via plato/dotfiles\n" >> $VIMFILES/platform.vimrc
  cat $V/osx.vimrc >> $VIMFILES/platform.vimrc
fi

if [ "$OS" = "windows" ]; then
  VRC=./generated/_vimrc
  VIMFILES=./generated/_vim
  # mkdir -p $VIMFILES
  # echo "\" windows-specific vim config via plato/dotfiles" >> $VIMFILES/platform.vimrc
  # cat $V/windows.vimrc >> $VIMFILES/platform.vimrc
fi

if [ "$OS" = "linux" ]; then
  ./node_modules/.bin/themer -t themer-xresources -c $THEME -o ./tmp
  $CP tmp/themer-xresources/themer-xresources-dark/.Xresources ./generated
  mkdir -p $VIMFILES
  echo "\" linux-specific vim config via plato/dotfiles" >> $VIMFILES/platform.vimrc
  cat $V/linux.vimrc >> $VIMFILES/platform.vimrc
  
  $CP - home/.bash_profile home/.bashrc ./generated
  $CP -R home/xmonad ./generated

  # concat X config and generated xresources theme
  while read line
  do
    echo $line >> ./generated/.Xresources
  done < ./home/.Xresources
  while read line
  do
    echo $line >> ./generated/.Xresources
  done < ./tmp/themer-xresources/themer-xresources-dark/.Xresources
fi

mkdir -p $VIMFILES/colors


#
# theming
echo "generating themes..."
./node_modules/.bin/themer -t themer-hyper -t themer-wallpaper-block-wave -t themer-vim -c $THEME -o tmp/
$CP tmp/themer-vim/ThemerVim.vim ./generated/.vim/colors
# $CP tmp/themer-hyper...

set -e


#
# vim
function appendVimComment() {
  printf "\"\n\" $1\n" >> $VRC
}

appendVimComment "Generated by github.com/therealplato/dotfiles/vim/build.sh"

appendVimComment "sensible.vim"
cat $V/sensible.vim >> $VRC

appendVimComment "plugins.vimrc"
cat $V/plugins.vimrc >> $VRC

appendVimComment "config.vimrc"
cat $V/config.vimrc >> $VRC

appendVimComment "ui.vimrc"
cat $V/ui.vimrc >> $VRC

appendVimComment "binds.vimrc"
cat $V/binds.vimrc >> $VRC

appendVimComment "go.vimrc"
cat $V/go.vimrc >> $VRC

echo "" >> $VIMFILES/platform.vimrc
cat $VIMFILES/platform.vimrc >> $VRC

echo "generated $(wc -l $VRC | grep -Eo ^[0-9]+) lines of vimrc"

mkdir -p $VIMFILES/autoload
$CP vendor/github.com/junegunn/vim-plug/plug.vim $VIMFILES/autoload/

$CP home/.screenrc ./generated
$CP home/.zshrc ./generated
$CP home/.slate.js ./generated
$CP home/.slatetile.js ./generated
$CP -R zsh/ generated/.zsh

if [ $FORCE -eq 1 ]; then
  $CP -vR ./generated/ $HOME
fi
